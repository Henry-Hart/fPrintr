#include "U8glib.h"
#include <Adafruit_Fingerprint.h>

//if you have a Leonardo/Micro, uncomment this:
#define hardwareSerial

U8GLIB_SH1106_128X64 u8g(13, 11, 10, 9, 8);  // D0=13, D1=11, CS=10, DC=9, Reset=8

const uint8_t fingerprint[] PROGMEM = { //Slightly completed fingerprint image
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x90, 0x00, 0x00, 0x00, 0x00,
0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x80, 0x00, 0x00, 0x00, 0xCF, 0xF8, 0xC0, 0x00,
0x00, 0x01, 0x00, 0x06, 0x20, 0x00, 0x00, 0x02, 0x67, 0xF1, 0x90, 0x00, 0x00, 0x04, 0xCC, 0x04,
0xC8, 0x00, 0x00, 0x0D, 0x91, 0xE2, 0x6C, 0x00, 0x00, 0x09, 0x26, 0x19, 0x24, 0x00, 0x00, 0x02,
0x48, 0x04, 0x96, 0x00, 0x00, 0x16, 0x91, 0xF2, 0x52, 0x00, 0x00, 0x14, 0xA4, 0x08, 0x5A, 0x00,
0x00, 0x35, 0x29, 0xE5, 0x6A, 0x00, 0x00, 0x35, 0x6B, 0x35, 0x2A, 0x00, 0x00, 0x35, 0x6A, 0x15,
0xA8, 0x00, 0x00, 0x35, 0x6A, 0x54, 0xA8, 0x00, 0x00, 0x35, 0x2A, 0x54, 0xA8, 0x00, 0x00, 0x35,
0xAA, 0x54, 0xA0, 0x00, 0x00, 0x15, 0xAA, 0x54, 0xAC, 0x00, 0x00, 0x15, 0xAA, 0x54, 0xAC, 0x00,
0x00, 0x05, 0xAA, 0x44, 0xAC, 0x00, 0x00, 0x05, 0x8A, 0x54, 0xA8, 0x00, 0x00, 0x05, 0x4A, 0x54,
0xA0, 0x00, 0x00, 0x01, 0x4A, 0x95, 0xA0, 0x00, 0x00, 0x01, 0x52, 0x35, 0x20, 0x00, 0x00, 0x00,
0x56, 0x25, 0x00, 0x00, 0x00, 0x00, 0x15, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x05, 0x68, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t fingerprint1[] PROGMEM = { //Almost completed fingerprint image
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xD0, 0x00, 0x00, 0x00, 0x00,
0x1F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x6F, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0xC0, 0x00,
0x00, 0x01, 0x28, 0x86, 0xA0, 0x00, 0x00, 0x03, 0x6F, 0xF9, 0xB0, 0x00, 0x00, 0x04, 0xDF, 0x1E,
0xD8, 0x00, 0x00, 0x0F, 0x91, 0xE6, 0x7C, 0x00, 0x00, 0x0D, 0x76, 0xB9, 0xE4, 0x00, 0x00, 0x12,
0xCB, 0x86, 0x9E, 0x00, 0x00, 0x16, 0x99, 0xF3, 0x5E, 0x00, 0x00, 0x1D, 0xAE, 0x3E, 0x5E, 0x00,
0x00, 0x3D, 0xAF, 0xE5, 0x6E, 0x00, 0x00, 0x35, 0xFB, 0x7D, 0xEE, 0x00, 0x00, 0x37, 0x7A, 0xBF,
0xB8, 0x00, 0x00, 0x3F, 0xEE, 0x7C, 0xAC, 0x00, 0x00, 0x3D, 0xBF, 0x5F, 0xBC, 0x00, 0x00, 0x35,
0xEA, 0xD6, 0xE4, 0x00, 0x00, 0x1F, 0xFB, 0x76, 0xAC, 0x00, 0x00, 0x17, 0xAB, 0x75, 0xEC, 0x00,
0x00, 0x0D, 0xBB, 0xF7, 0xFC, 0x00, 0x00, 0x0F, 0xAE, 0xDF, 0xB8, 0x00, 0x00, 0x07, 0x6A, 0xDF,
0xE0, 0x00, 0x00, 0x01, 0x5A, 0xB7, 0xA0, 0x00, 0x00, 0x01, 0x73, 0xBD, 0x60, 0x00, 0x00, 0x00,
0x76, 0xED, 0x40, 0x00, 0x00, 0x00, 0x15, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x05, 0x68, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x67,
0x0B, 0x09, 0xA6, 0x9A, 0x14, 0x10, 0x84,
};

const uint8_t matched[] PROGMEM = { //Tick image
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00,
0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x07, 0xC0, 0x00, 0x00, 0x01, 0x80, 0x0F, 0x80, 0x00, 0x00, 0x03, 0xC0, 0x1F, 0x00, 0x00,
0x00, 0x03, 0xE0, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

void draw(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, fingerprint);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:");
  u8g.drawStr(0, 50, "Status:Waiting");
}

void draw1(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, fingerprint1);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:");
  u8g.drawStr(0, 50, "Status:Waiting");
}

void draw2(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, fingerprint);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:");
  u8g.drawStr(0, 50, "Status:Waiting");
}

void draw3(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, fingerprint1);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:OK");
  u8g.drawStr(0, 50, "Status:Matching");
}

void draw4(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, fingerprint);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:OK");
  u8g.drawStr(0, 50, "Status:Matching");
}

void draw5(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, matched);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:OK");
  u8g.drawStr(0, 50, "Status:Saving");
}

#ifdef hardwareSerial
#define mySerial Serial1
#else
SoftwareSerial mySerial(2, 3); // pin #2 is IN, pin #3 is OUT
#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

uint8_t id;

void setup()  
{
  Serial.begin(9600);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit Fingerprint sensor enrollment");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }
}

void loop()                     // run over and over again
{
  finger.getTemplateCount();
  id = finger.templateCount + 1;
  getFingerprintEnroll();
}

void draw6(void) {
  u8g.drawBitmapP( 76, 5, 6, 37, matched);  // put bitmap
  u8g.setFont(u8g_font_unifont);  // select font
  u8g.drawStr(0, 10, "F1:OK");  // put string of display at position X, Y
  u8g.drawStr(0, 30, "F2:OK");
  u8g.drawStr(0, 50, "Saved");
  u8g.setPrintPos(64, 50); 
  u8g.print(id);
  u8g.drawStr(91, 50, "/128");
}

uint8_t getFingerprintEnroll() {
  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  Serial.print(finger.templateCount);
    u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );
  delay(1000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      u8g.firstPage();  
      do {
      draw1();
      } while( u8g.nextPage() );
      delay(500);
      u8g.firstPage();  
      do {
      draw2();
      } while( u8g.nextPage() );
      break;
    case FINGERPRINT_NOFINGER:
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      u8g.firstPage();  
      do {
      draw3();
      } while( u8g.nextPage() );
      delay(500);
      u8g.firstPage();  
      do {
      draw4();
      } while( u8g.nextPage() );
      break;
    case FINGERPRINT_NOFINGER:
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  
  Serial.print("ID "); Serial.println(id);
  u8g.firstPage();  
  do {
  draw5();
  } while( u8g.nextPage() );
  delay(1000);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    u8g.firstPage();  
    do {
    draw6();
    } while( u8g.nextPage() );
    delay(1000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
}
